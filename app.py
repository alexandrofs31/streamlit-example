# -*- coding: utf-8 -*-
"""Raiz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZGO33AHbOpIWkw2h-OkgjuiY2BiemlF
"""

##################################################
# Importando Bibliotecas/Pacotes
##################################################

from numpy.core.numeric import True_
from sklearn import metrics
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import plot_confusion_matrix, plot_roc_curve, plot_precision_recall_curve
from sklearn.metrics import precision_score, recall_score


import sys
import warnings

if not sys.warnoptions:
    warnings.simplefilter("ignore")

##################################################
# Criando a Aplicação no Streamlit
##################################################

@st.cache(persist= True)


##################################################
# Importando os Dados
##################################################

def load():
    column_names = ['target', 
                'cap-shape',
                'cap-surface',
                'cap-color',
                'bruises?',
                'odor',
                'gill-attachment',
                'gill-spacing',
                'gill-size',
                'gill-color',
                'stalk-shape',
                'stalk-root',
                'stalk-surface-above-ring',
                'stalk-surface-below-ring',
                'stalk-color-above-ring',
                'stalk-color-below-ring',
                'veil-type',
                'veil-color',
                'ring-number',
                'ring-type',
                'spore-print-color',
                'population',
                'habitat']
    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data'
    data= pd.read_csv(url, header=None, names=column_names)   
    label= LabelEncoder()
    for i in data.columns:
        data[i] = label.fit_transform(data[i])
    return data
df = load()


##################################################
# Criando um checkbox para mostrar o Dataset
##################################################

if st.sidebar.checkbox("Ver o Dataset", False):
    st.subheader("Veja o Dataset Mushroom (Cogumelos)")
    st.write(df)


##################################################
# Processando os dados - Amostragem
##################################################

@st.cache(persist=True)

def split(df):
    y = df.target 
    x = df.drop(columns=["target"])
    x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3, random_state=0)
    
    return x_train, x_test, y_train, y_test
x_train, x_test, y_train, y_test = split(df)


##################################################
# Função de Visualização de Métricas
##################################################

def plot_metrics(metrics_list):
    if "Confusion Matrix" in metrics_list:
        st.subheader("Confusion Matrix")
        plot_confusion_matrix(model, x_test, y_test, display_labels=   class_names)
        st.pyplot()
    if "ROC Curve" in metrics_list:
        st.subheader("ROC Curve")
        plot_roc_curve(model, x_test, y_test)
        st.pyplot()
    if "Precision-Recall Curve" in metrics_list:
        st.subheader("Precision-Recall Curve")
        plot_precision_recall_curve(model, x_test, y_test)
        st.pyplot()
class_names = ["Comestível", "Venenoso"]

##################################################
# Criando as Máquinas Preditivas - Classificadores
##################################################

st.set_option('deprecation.showPyplotGlobalUse', False)

st.sidebar.subheader("Escolha a Máquina Preditiva de Classificação")
classifier = st.sidebar.selectbox("Classifier", ("Support Vector Machine (SVM)", "Logistic Regression", "Random Forest"))




##################################################
# MP 1 - Support Vector Machine
##################################################

if classifier == "Support Vector Machine (SVM)":
    st.sidebar.subheader("Hyperparâmetros")
    C = st.sidebar.number_input("C (Regularization parameter)", 0.01, 10.0, step=0.01, key="C")
    kernel = st.sidebar.radio("Kernel", ("rbf", "linear"), key="kernel") 
    gamma = st.sidebar.radio("Gamma (Kernal coefficient", ("scale", "auto"), key="gamma")
    metrics = st.sidebar.multiselect("Qual métrica utilizar?", ("Confusion Matrix", "ROC Curve", "Precision-Recall Curve"))
    st.set_option('deprecation.showPyplotGlobalUse', False)

    if st.sidebar.button("Classify", key="classify"):
        st.subheader("Support Vector Machine (SVM) results")
        model = SVC(C=C, kernel=kernel, gamma=gamma)
        model.fit(x_train, y_train)
        accuracy = model.score(x_test, y_test)
        y_pred = model.predict(x_test)
        st.write("Accuracy: ", accuracy.round(2))
        st.write("Precision: ", precision_score(y_test, y_pred, labels=class_names).round(2))
        st.write("Recall: ", recall_score(y_test, y_pred, labels=class_names).round(2)) 
        plot_metrics(metrics)



##################################################
# MP 1 - Logistic Regression
##################################################

if classifier == "Logistic Regression":
    st.sidebar.subheader("Hyperparâmetros")
    C = st.sidebar.number_input("C (Regularization parameter)", 0.01, 10.0, step=0.01, key="C_LR")
    max_iter = st.sidebar.slider("Maximum iterations", 100, 500, key="max_iter")
    metrics = st.sidebar.multiselect("Qual métrica utilizar?", ("Confusion Matrix", "ROC Curve", "Precision-Recall Curve"))
    st.set_option('deprecation.showPyplotGlobalUse', False)

    if st.sidebar.button("Classify", key="classify"):
        st.subheader("Logistic Regression Results")
        model = LogisticRegression(C=C, max_iter=max_iter)
        model.fit(x_train, y_train)
        accuracy = model.score(x_test, y_test)
        y_pred = model.predict(x_test)
    
        st.write("Accuracy: ", accuracy.round(2))
        st.write("Precision: ", precision_score(y_test, y_pred, labels=class_names).round(2))
        st.write("Recall: ", recall_score(y_test, y_pred, labels=class_names).round(2))
        plot_metrics(metrics)

##################################################
# MP 1 - Random Forest
##################################################

if classifier == "Random Forest":
    st.sidebar.subheader("Hyperparâmetros")
    n_estimators= st.sidebar.number_input("O n° de árvores de decisão na floresta", 100, 5000, step=10, key="n_estimators")
    max_depth = st.sidebar.number_input("O mx_depth of tree - Profundidade da Árvore", 1, 20, step =1, key="max_depth")
    bootstrap = st.sidebar.radio("Amostras - Bootstrap samples when building trees", ("True", "False"), key="bootstrap")
    
    metrics = st.sidebar.multiselect("Qual métrica utilizar?", ("Confusion Matrix", "ROC Curve", "Precision-Recall Curve"))
    st.set_option('deprecation.showPyplotGlobalUse', False)
    
    if st.sidebar.button("Classify", key="classify"):
        st.subheader("Random Forest Results")
        model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, bootstrap= bootstrap, n_jobs=-1 )
        model.fit(x_train, y_train)
        accuracy = model.score(x_test, y_test)
        y_pred = model.predict(x_test)
        st.write("Accuracy: ", accuracy.round(2))
        st.write("Precision: ", precision_score(y_test, y_pred, labels=class_names).round(2))
        st.write("Recall: ", recall_score(y_test, y_pred, labels=class_names).round(2))
        plot_metrics(metrics)









